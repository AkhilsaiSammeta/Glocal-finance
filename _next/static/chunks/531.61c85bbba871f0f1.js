"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[531],{82531:(e,t,n)=>{n.r(t),n.d(t,{handleSuiTransaction:()=>l});var r=n(41918),a=n(94606),o=n(88784);function l(e){return(0,r.d)(this,arguments,function*({primaryWallet:e,serializedTransaction:t,iframeClient:n}){let r,l,i;try{if(!(0,a.ty)(e))throw Error("primaryWallet is not a Sui wallet");if(!(r=yield e.getWalletClient()))throw Error("Failed to get wallet client")}catch(e){console.error("[CryptoWalletConnectionHandler] failed to get wallet client",e),n.send("crypto:send-transaction:failed",{error:"Failed to get wallet client"});return}try{l=o.Z.from(t)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),n.send("crypto:send-transaction:failed",{error:"Failed to deserialize transaction"});return}try{i=yield e.signTransaction(l)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to sign transaction",e),n.send("crypto:send-transaction:failed",{error:e.message});return}try{let e=yield r.executeTransactionBlock({transactionBlock:i.bytes,signature:i.signature});console.log("[CryptoWalletConnectionHandler] executeTransactionBlockResponse",e),n.send("crypto:send-transaction:success",{txId:e.digest})}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),n.send("crypto:send-transaction:failed",{error:e.message});return}})}}}]);