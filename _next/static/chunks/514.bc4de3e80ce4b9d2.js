"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[514],{80514:(e,n,r)=>{r.r(n),r.d(n,{handleSolanaTransaction:()=>l});var t=r(41918),a=r(38438),o=r(23570),i=r(96922);function l(e){return(0,t.d)(this,arguments,function*({primaryWallet:e,serializedTransaction:n,iframeClient:r}){let t,l;try{if(!(0,a._6)(e))throw Error("primaryWallet is not a Solana wallet");t=yield e.getSigner()}catch(e){console.error("[CryptoWalletConnectionHandler] failed to get signer",e),r.send("crypto:send-transaction:failed",{error:"Failed to get signer"});return}try{l=o.ZX.from(i.decode(n))}catch(e){console.error("[CryptoWalletConnectionHandler] failed to deserialize transaction",e),r.send("crypto:send-transaction:failed",{error:"Failed to deserialize transaction"});return}try{let{signature:e}=yield t.signAndSendTransaction(l);console.log("[CryptoWalletConnectionHandler] txId",e),r.send("crypto:send-transaction:success",{txId:e})}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),r.send("crypto:send-transaction:failed",{error:e.message})}})}}}]);